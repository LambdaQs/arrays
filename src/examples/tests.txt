


This is Qsharp tree for the ImpureClassicalExample:


Prog ([NDec (QUnqual (UIdent "ImpureClassicalExample"),
[NSOp (QQual (QIdent "Microsoft.Quantum.Intrinsic"));
NSCall (DPrefix ([], AEmpty), CDFun (UIdent "Tail", TAList ([TIdent "'A"]),
ParTpl ([ParNI (NItem (UIdent "array", TArr (TPar (TIdent "'A"))))]), TPar (TIdent "'A"),
BScope (Scp (

[SExp (ECall (EName (QUnqual (UIdent "EqualityFactB")), [EGt (ECall (EName (QUnqual (UIdent "Length")),
[EName (QUnqual (UIdent "array"))]), EInt (Int "0")); EBool (BTru); EStrI ("Array must be of the length at least 1")]));
SRet (EIndex (EName (QUnqual (UIdent "array")), ESub (ECall (EName (QUnqual (UIdent "Length")),
[EName (QUnqual (UIdent "array"))]), EInt (Int "1"))))]))))])])






Prog ([NDec (QUnqual (UIdent "IfsExample"), [NSOp (QQual (QIdent "Microsoft.Quantum.Intrinsic")); NSCall (DPrefix ([], AEmpty),
CDFun (UIdent "test", TAEmpty, ParTpl ([ParNI (NItem (UIdent "a", TpInt))])

, TpInt,
BScope (Scp (
    [SIf (EEq (EName (QUnqual (UIdent "a")), EInt (Integ "1")),
        Scp ([SRet (EName (QUnqual (UIdent "a")))]));
    SEIf (EEq (EName (QUnqual (UIdent "a")), EInt (Integ "2")),
        Scp ([SRet (EAdd (EName (QUnqual (UIdent "a")), EName (QUnqual (UIdent "a"))))]));
    SEIf (EEq (EName (QUnqual (UIdent "a")), EInt (Integ "3")),
        Scp ([SRet (EAdd (EName (QUnqual (UIdent "a")), EInt (Integ "7")))]));
    SElse (Scp ([SLet (BndName (UIdent "v"), EBool (BTru)); SRet (EName (QUnqual (UIdent "v")))]))]))))])])

[Output abstract syntax]

CBnd (TFun (TInt, TInt), TDummy,
    ELam (TInt, TInt, MVar (Ident "a"),
    ECmd (TDummy, CRet (TDummy, EIte (TDummy,
    EEq (EVar (MVar (Ident "a")), EInt (1)),
    EVar (MVar (Ident "a")),
    EIte (TDummy, EEq (EVar (MVar (Ident "a")), EInt (2)), EAdd (EVar (MVar (Ident "a")), EVar (MVar (Ident "a"))),
    EIte (TDummy, EEq (EVar (MVar (Ident "a")), EInt (3)), EAdd (EVar (MVar (Ident "a")), EInt (7)),
    ELet (TDummy, TDummy, ETrue, MVar (Ident "v"), EVar (MVar (Ident "v"))))))))),
    MVar (Ident "test"), CRet (TUnit, ETriv))





Prog ([NDec (QQual (QIdent "Microsoft.Quantum.Arrays"), [NSOp (QQual (QIdent "Microsoft.Quantum.Logical")); NSCall (DPrefix ([], AEmpty),
CDFun (UIdent "All", TAList ([TIdent "'T"]),

ParTpl ([ParNI (NItem (UIdent "predicate", TpTpl ([TpFun (TpPar (TIdent "'T"), TpBool)])));
ParNI (NItem (UIdent "array", TpArr (TpPar (TIdent "'T"))))]), TpBool,

BScope (Scp ([SRet
(ECall (EName (QUnqual (UIdent "Fold")),

[EName (QUnqual (UIdent "And"));
 EBool (BTru);
 ECall (EName (QUnqual (UIdent "Mapped")), [EName (QUnqual (UIdent "predicate"));

EName (QUnqual (UIdent "array"))])]))]))))])])







Elaboration for All.qs:

[Input abstract syntax]

Prog ([NDec (QQual (QIdent "Microsoft.Quantum.Arrays"), [NSOp (QQual (QIdent "Microsoft.Quantum.Logical")); NSClbl (DPrefix ([], AEmpty), CDFun (UIdent "All", TAList ([TIdent "'T"]), ParTpl ([ParNI (NItem (UIdent "predicate", TpTpl ([TpFun (TpPar (TIdent "'T"), TpBool)]))); ParNI (NItem (UIdent "array", TpArr (TpPar (TIdent "'T"))))]), TpBool, BScope (Scp ([SRet (QsECall (QsEName (QUnqual (UIdent "Fold")), [QsEName (QUnqual (UIdent "And")); QsEBool (BTru); QsECall (QsEName (QUnqual (UIdent "Mapped")), [QsEName (QUnqual (UIdent "predicate")); QsEName (QUnqual (UIdent "array"))])]))]))))])])

[Output abstract syntax]

ELet (TFun (TFun (TTVar (MTVar (Ident "'T")), TBool), TFun (TArr (TTVar (MTVar (Ident "'T"))), TBool)), TDummy, ELam (TFun (TTVar (MTVar (Ident "'T")), TBool), TFun (TArr (TTVar (MTVar (Ident "'T"))), TBool), MVar (Ident "predicate"), ELam (TArr (TTVar (MTVar (Ident "'T"))), TBool, MVar (Ident "array"), EAp (TDummy, TDummy, EAp (TDummy, TDummy, EAp (TDummy, TDummy, EVar (MVar (Ident "Fold")), EVar (MVar (Ident "And"))), ETrue), EAp (TDummy, TDummy, EAp (TDummy, TDummy, EVar (MVar (Ident "Mapped")), EVar (MVar (Ident "predicate"))), EVar (MVar (Ident "array")))))), MVar (Ident "All"), ETriv)





Elaboration for TyVarLambdaTest.qs

For input, just look at code itself, it will be more clear.
The uncurrying makes the functions very complicated.
Also, types are everywhere and repeated a lot.


[Output abstract syntax]

ELet
	(TFun (TFun (TTVar (MTVar (Ident "'T")), TBool), TFun (TArr (TTVar (MTVar (Ident "'T"))), TBool)),
	TDummy,
	ELam (TFun (TTVar (MTVar (Ident "'T")), TBool), TFun (TArr (TTVar (MTVar (Ident "'T"))), TBool), MVar (Ident "predicate"), ELam (TArr (TTVar (MTVar (Ident "'T"))), TBool, MVar (Ident "array"), EAp (TDummy, TDummy, EAp (TDummy, TDummy, EAp (TDummy, TDummy, EVar (MVar (Ident "Fold")), EVar (MVar (Ident "And"))), ETrue), EAp (TDummy, TDummy, EAp (TDummy, TDummy, EVar (MVar (Ident "Mapped")), EVar (MVar (Ident "predicate"))), EVar (MVar (Ident "array")))))),
	MVar (Ident "All"),

	ELet
		(TFun (TInt, TBool),
		TDummy,
		ELam (TInt, TBool, MVar (Ident "a"), EGt (EVar (MVar (Ident "a")), EInt (0))),
		MVar (Ident "simple_fun"),

		ELet
			(TFun (TStr, TBool),
			TDummy,
			ELam (TStr, TBool, MVar (Ident "input"), ELet (TDummy, TDummy, EArrC (TDummy, EInt (6), [EInt (0); EInt (1); EInt (2); EInt (3); EInt (4); EInt (5)]), MVar (Ident "sample"), EAp (TDummy, TDummy, EAp (TDummy, TDummy, EVar (MVar (Ident "All")), EVar (MVar (Ident "simple_fun"))), EVar (MVar (Ident "sample"))))),
			MVar (Ident "main"),

			ETriv)))
