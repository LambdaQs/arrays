entrypoints Doc;
comment "//";

Prog. Doc ::= [Nmspace];

-- Namespace

NDec . Nmspace ::= "namespace" QName "{" [NSElmnt] "}";

terminator Nmspace "";
terminator NSElmnt "";

QUnqual. QName ::= UIdent;
QQual.   QName ::= QIdent;

NSOp   . NSElmnt ::= "open" QName ";";
NSOpAs . NSElmnt ::= "open" QName "as" QName ";";
NSTy   . NSElmnt ::= DeclPrefix "newtype" UIdent "=" UType ";" ;
NSCall . NSElmnt ::= DeclPrefix CallDec;

DPrefix. DeclPrefix ::= [Attr] Access;

AAttr. Attr ::= "@" Expr;

terminator Attr "";

AEmpty    . Access ::= ;
AInternal . Access ::= "internal";

-- Type Declaration

UTTpl  . UType ::= "(" [TyTplItem] ")";
UTETyp . UType ::= Tp;

separator nonempty TyTplItem ",";

TTIName. TyTplItem ::= NamedItem;
TTIUTyp. TyTplItem ::= UType;

NItem . NamedItem ::= UIdent ":" Tp;

-- Callable Declaration

CDFun . CallDec ::= "function"  UIdent TyArg ParamTpl ":" Tp Body;
CDOp  . CallDec ::= "operation" UIdent TyArg ParamTpl ":" Tp Chars Body;

TAEmpty . TyArg ::= ;
TAList  . TyArg ::= "<" [TIdent] ">";

separator TIdent ",";

ParTpl . ParamTpl ::= "(" [Param] ")";

separator Param ",";

ParNI  . Param ::= NamedItem;
ParNIA . Param ::= ParamTpl ;

CEmpty. Chars ::= ;
CIs.    Chars ::= "is" CharsExp;

CEAdj.   CharsExp2 ::= "Adj";
CECtl.   CharsExp2 ::= "Ctl";
CETimes. CharsExp1 ::= CharsExp1 "*" CharsExp2;
CEPlus.  CharsExp ::= CharsExp "+" CharsExp1;

coercions CharsExp 2 ;

separator Spec "";

BSpec.  Body ::= "{" [Spec] "}";
BScope. Body ::= Scope;

SSpec. Spec ::= SpecName SpecGen;

SNBody.   SpecName ::= "body";
SNAdj.    SpecName ::= "adjoint";
SNCtl.    SpecName ::= "controlled";
SNCtlAdj. SpecName ::= "controlled" "adjoint";
SNAdjCtl. SpecName ::= "adjoint" "controlled"; -- TODO inelegant

SGScope.  SpecGen ::= Scope;
SGImpl.   SpecGen ::= SpecParamTpl Scope;
SGAuto.   SpecGen ::= "auto" ";";
SGSelf.   SpecGen ::= "self" ";";
SGInvert. SpecGen ::= "invert" ";";
SGDist.   SpecGen ::= "distribute" ";";
SGIntr.   SpecGen ::= "intrinsic" ";";

SpecParTpl. SpecParamTpl ::= "(" [SpecParam] ")";

separator SpecParam ",";

SPVar.   SpecParam ::= UIdent;
SPSubst. SpecParam ::= "...";
SPTpl.   SpecParam ::= SpecParamTpl;

Scp . Scope ::= "{" [Stm] "}";

separator Stm "";

-- Types
TpEmp  . Tp ::= "_";
TpPar  . Tp ::= TIdent;
TpUDT  . Tp ::= QName;
TpTpl  . Tp ::= "(" [Tp] ")";
TpFun  . Tp ::= Tp "->" Tp;
TpOp   . Tp ::= Tp "=>" Tp Chars;
TpArr  . Tp ::= Tp "[" "]";
TpBInt . Tp ::= "BigInt";
TpBool . Tp ::= "Bool"  ;
TpDbl  . Tp ::= "Double";
TpInt  . Tp ::= "Int"   ;
TpPli  . Tp ::= "Pauli" ;
TpQbit . Tp ::= "Qubit" ;
TpRng  . Tp ::= "Range" ;
TpRes  . Tp ::= "Result";
TpStr  . Tp ::= "String";
TpUnit . Tp ::= "Unit"  ;

separator Tp ",";

-- Statement
SExp.    Stm ::= Expr ";";
SRet.    Stm ::= "return" Expr";";
SFail.   Stm ::= "fail" Expr";";
SLet.    Stm ::= "let" Bnd "=" Expr ";";
SMut.    Stm ::= "mutable" Bnd "=" Expr ";";
SSet.    Stm ::= "set" Bnd "=" Expr ";";
SSetOp.  Stm ::= "set" UIdent SetOp Expr ";";
SSetW.   Stm ::= "set" UIdent "w/=" Expr LARR Expr ";";
SIf.     Stm ::= "if" Expr Scope;
SEIf.    Stm ::= "elif" Expr Scope;
SElse.   Stm ::= "else" Scope;
SFor.    Stm ::= "for" Bnd "in" Expr Scope;
SWhile.  Stm ::= "while" Expr Scope;
SRep.    Stm ::= "repeat" Scope;
SUntil.  Stm ::= "until" Expr ";";
SUntilF. Stm ::= "until" Expr "fixup" Scope;
SWithin. Stm ::= "within" Scope;
SApply.  Stm ::= "apply" Scope;
SUse.    Stm ::= "use" QbitBnd ";";
SUseS.   Stm ::= "use" QbitBnd Scope;

SoPow.    SetOp ::= "^=";
SoMul.    SetOp ::= "*=";
SoDiv.    SetOp ::= "/=";
SoMod.    SetOp ::= "%=";
SoAdd.    SetOp ::= "+=";
SoSub.    SetOp ::= "-=";
SoShiftR. SetOp ::= ">>>=";
SoShiftL. SetOp ::= "<<<=";
SoBAnd.   SetOp ::= "&&&";
SoBXor.   SetOp ::= "^^^=";
SoBOr.    SetOp ::= "|||=";
SoLAnd.   SetOp ::= "and=";
SoLOr.    SetOp ::= "or=";

BndWild . Bnd ::= "_";
BndName . Bnd ::= UIdent;
BndTplA . Bnd ::= "(" [Bnd] ")";

separator nonempty Bnd ",";

QBnd. QbitBnd ::= Bnd "=" QbitInit;

QInitS. QbitInit ::= "Qubit" "(" ")";
QInitA. QbitInit ::= "Qubit" "[" Expr "]";
QInitT. QbitInit ::= "(" [QbitInit] ")";

separator QbitInit ",";

-- Expressions
EEmp.     Expr21 ::= "_";
EName.    Expr21 ::= QName;
ENameT.   Expr21 ::= QName "<" [Tp] ">";
EInt.     Expr21 ::= Int;
EBInt.    Expr21 ::= BigInt;
EDbl.     Expr21 ::= Doubl;
EStr.     Expr21 ::= String;
EStrI.    Expr21 ::= "$" String;
EBool.    Expr21 ::= BoolL;
ERes.     Expr21 ::= ResL;
EPli.     Expr21 ::= PliL;
ETp.      Expr21 ::= "(" [Expr] ")";
EArr.     Expr21 ::= "[" [Expr] "]";
ESArr.    Expr21 ::= "[" Expr "," ArSizeEq Expr "]";
-- ELamFn.   Expr21   ::= Bnd "->" Expr21; -- TODO function lambdas (QuantumROM.qs)
-- ELamOp.   Expr21   ::= Bnd "=>" Expr21; -- TODO operation lambdas (SinglyControlled.qs)
-- see git:qsharp-compiler/src/QsCompiler/TextProcessor/QsKeywords.fs
-- Combinators (calls and array items) & Modifiers (functors and unwrap)
EItem.    Expr20 ::= Expr20 "::" UIdent;
EUnwrap.  Expr19 ::= Expr19 "!";
EIndex.   Expr19 ::= Expr19 "[" Expr "]";
ECtrl.    Expr18 ::= "Controlled" Expr18;   -- 951
EAdj.     Expr18 ::= "Adjoint" Expr18;      -- 950
ECall.    Expr17 ::= Expr17 "(" [Expr] ")";  -- 900
-- Operators
EPos.     Expr16 ::= "+"   Expr16;          -- 45
ENeg.     Expr16 ::= "-"   Expr16;          -- 45
ELNot.    Expr16 ::= "not" Expr16;          -- 45
EBNot.    Expr16 ::= "~~~" Expr16;          -- 45
EPow.     Expr15 ::= Expr16 "^" Expr15;
EMul.     Expr14 ::= Expr14 "*" Expr15;
EDiv.     Expr14 ::= Expr14 "/" Expr15;
EMod.     Expr14 ::= Expr14 "%" Expr15;
EAdd.     Expr13 ::= Expr13 "+" Expr14;
ESub.     Expr13 ::= Expr13 "-" Expr14;
EShiftR.  Expr12 ::= Expr12 ">>>" Expr13;
EShiftL.  Expr12 ::= Expr12 SHFTL Expr13;
EGt.      Expr11 ::= Expr11 ">"  Expr12;
EGte.     Expr11 ::= Expr11 ">=" Expr12;
ELt.      Expr11 ::= Expr11 LT   Expr12;
ELte.     Expr11 ::= Expr11 LTE  Expr12;
EEq.      Expr10 ::= Expr10 "==" Expr11;
ENeq.     Expr10 ::= Expr10 "!=" Expr11;
EBAnd.    Expr9  ::= Expr9 "&&&" Expr10;
EBXor.    Expr8  ::= Expr8 "^^^" Expr9;
EBOr.     Expr7  ::= Expr7 "|||" Expr8;
ELAnd.    Expr6  ::= Expr6 "and" Expr7;
ELOr.     Expr5  ::= Expr5 "or" Expr6;
ECond.    Expr4  ::= Expr5 "?" Expr "|" Expr4;  -- 5
ERange.   Expr3  ::= Expr3 ".." Expr4;         -- 2
ERangeR.  Expr2  ::= Expr2 "...";
ERangeL.  Expr1  ::= "..." Expr1;
ERangeLR. Expr   ::= "...";                  -- 2
EUpdate.  Expr   ::= Expr "w/" Expr LARR Expr1; -- 1

coercions Expr 21 ;

separator Expr ",";

BTru . BoolL ::= "true";
BFls . BoolL ::= "false";

ROne  . ResL ::= "One";
RZero . ResL ::= "Zero";

PliI  . PliL ::= "PauliI";
PliX  . PliL ::= "PauliX";
PliY  . PliL ::= "PauliY";
PliZ  . PliL ::= "PauliZ";

token TIdent '\'' letter (letter | digit | '_' | '\'')*;
token QIdent letter (letter | digit | '_')* ('.' letter (letter | digit | '_')*)+;
token UIdent ('_')? letter (letter | digit | '_')*;

-- TODO also define and include binary
token Int     digit+ | ('0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+) | ('0'["01234567"]*);
token BigInt (digit+ | ('0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+) | ('0'["01234567"]*))  ('l'|'L');

token Doubl (digit* '.' digit+ (('e'|'E') '-'? digit+)?) | digit+ ('e'|'E') '-'? digit+;

token ArSizeEq 's' 'i' 'z' 'e' ' ' '=';

token LT ' ' '<';
token LTE ' ' '<' '=';
token SHFTL ' ' '<' '<' '<';
token LARR ' ' '<' '-';
