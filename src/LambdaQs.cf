entrypoints Exp;

-- Metavariables
MVar. Var ::= Ident; -- variables
MUni. Uni ::= Ident; -- unitaries
MKey. Key ::= Ident; -- qubit symbols/unique keys

-- Types
TQref. Typ ::= "qref" "[" Key "]";          -- qubit reference
TParr. Typ ::= Typ "->" Typ;                -- partial function
TCmd.  Typ ::= "cmd" "(" Typ ")";           -- command
TProd. Typ ::= Typ "*" Typ;
TArr.  Typ ::= Typ "[" "]";
TBool. Typ ::= "bool";
TUnit. Typ ::= "unit";
TStr.  Typ ::= "string";
TInt.  Typ ::= "int";

-- Expressions
EVar.  Exp ::= Var;
ELet.  Exp ::= "let" Var "be" Exp "in" Exp;   -- let expression
ELam.  Exp ::= "\\" "(" Var ":" Typ ")" Exp;  -- lambda abstraction
EAp.   Exp ::= Exp "(" Exp ")";               -- application
ECmd.  Exp ::= "cmd" Cmd;                     -- encapsulation
EQloc. Exp ::= "&" Key;                       -- qubit locations
ETpl.  Exp ::= "(" Exp "," Exp ")";
EProj. Exp ::= Exp "." Integer;               -- currently just 1 or 2 as these are pairs
ETrue. Exp ::= "true";
EFls.  Exp ::= "false";
EIte.  Exp ::= "if" Exp "then" Exp "else" Exp;
ENot.  Exp ::= "not" Exp;
-- TODO: make sure precedence is correct here
EEq.   Exp ::= Exp "==" Exp; 
EAdd.  Exp ::= Exp "+" Exp;
EInt.  Exp ::= Integer;
ETriv. Exp ::= "()";
ERef.  Exp ::= Exp "requires" Ref "ensures" Ref; -- TODO

-- Commands
CRet.   Cmd ::= "ret" Exp;                                -- return
CBnd.   Cmd ::= "bnd" Var "<-" Exp ";" Cmd;               -- sequence
CNew.   Cmd ::= "new" Var "in" Cmd;                       -- new qubit reference
CGap.   Cmd ::= Uni "(" Exp ")";                          -- unitary gate application
CDiag.  Cmd ::= "D" "(" Uni "," Uni ";" Exp "," Exp ")";  -- diagonal gate application
CMeas.  Cmd ::= "meas" "(" Exp ")";                       -- measurement

-- Refinements
REq.  Ref ::= Var "=" Integer;

-- Programming idioms

-- sequential composition of commands
seq. Cmd ::= "{" Var "<-" Cmd ";" Cmd "}";
define seq x m1 m2 = CBnd x (ECmd m1) m2;

-- `do e` executes an encapsulated command and returns its result
-- This encoding requires an explicit variable argument
-- Example: do 1 x
do. Exp ::= "do" Exp Var;
define do e x = ECmd (CBnd x e (CRet (EVar x)));

-- procedure
proc. Exp ::= "proc" "(" Var ":" Typ ")" Cmd;
define proc x t m = ELam x t (ECmd m);

-- procedure call
-- This encoding also requires an explicit variable argument
pcall. Exp ::= "call" Exp "(" Exp ")" Var;
define pcall e1 e2 x = ECmd (CBnd x (EAp e1 e2) (CRet (EVar x)));;

internal EVarT. Exp ::= "(" Var ":" Typ ")";
