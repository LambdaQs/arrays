entrypoints Exp;

-- Kinds (TODO: if needed)
-- Base. KBase ::= B; -- base kind
-- Star. KStar ::= *; -- star kind

-- Base types
BNat. Nat ::= Integer;

-- Metavariables
MVar.  Var  ::= Ident;    -- variables
MTVar. TVar ::= Ident;    -- type variables
MUni.  Uni  ::= Ident;    -- unitaries
MKey.  Key  ::= Nat;  -- qubit symbols/unique keys
MKVar. KVar ::= Ident;    -- key variables

--TODO: add list type specific for qubit arrays?
-- Types
TTVar.    Typ ::= TVar;                           -- type variable
TQref.    Typ ::= "tqref"   "<" Key ">";          -- qubit reference
TQAll.    Typ ::= "tqall"   "<" KVar ">";         -- abstract qubit ref
TFun.     Typ ::= "tfun"    "(" [TVar] "." [Typ] ";" Typ  "requires" [Constr] "ensures" [Constr] ")"; -- function with both tvars and types
TCmd.     Typ ::= "tcmd"    "(" Typ ")";          -- command
TProd.    Typ ::= "tprod"   "(" Typ ";" Typ ")";  -- TODO: also add a variadic product type

TArr.    Typ ::= "tarr"    "(" Nat ";" Typ ")";  -- concrete array
TAbsArr. Typ ::= "tabsarr" "(" Typ ")";          -- abstract array of arbitrary length
-- TArr.     Typ ::= "tarr"    "[" Typ "]";          -- any non qubit array
-- TQArr.    Typ ::= "tqarr"   "(" Nat ")";          -- concrete qubit array
-- TAbsQArr. Typ ::= "tabsqarr";                     -- abstract qubit array of arbirary length

TRng.     Typ ::= "trange";
TPauli.   Typ ::= "tpauli";                       -- TODO: consider changing this to sum type
TUnit.    Typ ::= "tunit";
TBool.    Typ ::= "tbool";
TStr.     Typ ::= "tstr";
TInt.     Typ ::= "tint";
TDbl.     Typ ::= "tdouble";
TDummy.   Typ ::= "tdummy";


separator TVar ",";

separator Typ ",";



-- could be useful shorthand?
--FIXME: TypedVar is a bad name for this
TyVar . TypedVar ::= Var ":" Typ;
TyExp . TypedExp ::= Exp ":" Typ;

separator TypedVar ",";
separator TypedExp ",";

-- TODO: instead of making these Exp, could make BooleanExp? )
-- Constraints
CBool.    Constr ::= "constr" Exp;
CLt.      Constr ::= "constr" Exp "<" Exp;
CLe.      Constr ::= "constr" Exp "<=" Exp;
CGt.      Constr ::= "constr" Exp ">" Exp;
CGe.      Constr ::= "constr" Exp ">=" Exp;
CEq.      Constr ::= "constr" Exp "=" Exp;
CNeq.     Constr ::= "constr" Exp "<>" Exp;
CAnd.     Constr ::= "constr" Constr "||" Constr;
COr.      Constr ::= "constr" Constr "&&" Constr;
CImp.     Constr ::= "constr" Constr "->" Constr;
CForall.  Constr ::= "forall" Var "," Constr;

separator Constr ",";


-- Expressions
EVar.     Exp ::= Var;
EArg.     Exp ::= Nat;
EWld.     Exp ::= "_";                                                     -- wildcard
ELet.     Exp ::= "let" Var "be" Exp ":" Typ "in" Exp ":" Typ;             -- let expression

-- TODO: also add these in types, but a bit unclear how to do the refinements
ELam.     Exp ::= "Λ" [TVar] "λ"  [TypedVar] "->" Exp ":" Typ; -- lambda abstraction
EAp.      Exp ::= "ap" "[" Exp ":" Typ  ";" [TypedExp] "]";                -- application
ETAp.     Exp ::= "tap" "[" Exp ":" Typ ";" Typ"]";                        -- type application

ECmd.     Exp ::= "cmd" "[" Typ "]" Cmd;                                   -- encapsulation
EQloc.    Exp ::= "&" Key;                                                 -- qubit locations TODO: still needed?
EProj.    Exp ::= "proj" "<" Integer ">" "[" Typ ";" Typ "]" "(" Exp ")";  -- currently just 1 or 2 as these are pairs
EPair.    Exp ::= "pair" "[" Typ ";" Typ "]" "(" Exp ";" Exp ")";          -- TODO: support variadic tuples
ETriv.    Exp ::= "<>";                                                    -- can also call it null
ETrue.    Exp ::= "true";
EFls.     Exp ::= "false";
EIte.     Exp ::= "if" "[" Typ "]" "(" Exp ";" Exp ";" Exp ")";
ENot.     Exp ::= "not" Exp;
EArrNew.  Exp ::= "anew"    "[" Typ "]" "(" Nat ";" [Exp] ")";  -- new array,   e.g. let a be anew[int](3; [1,2,3])
EArrRep.  Exp ::= "arepeat" "[" Typ "]" "(" Nat ";" Exp ")";    -- array of repeated elem, Nat is size TODO: eventually, Nat should be Exp
EArrIdx.  Exp ::= "aidx"    "[" Typ "]" "(" Exp ";" Exp ")";    -- array index, e.g. aidx[int](a; 1) gets the 2nd elem in a
EArrLen.  Exp ::= "alen"    "(" Exp ")";                        -- array length e.g. alen(a)
EPow.     Exp ::= "pow"     "(" Exp ";" Exp ")";
EMul.     Exp ::= "mul"     "(" Exp ";" Exp ")";
EDiv.     Exp ::= "div"     "(" Exp ";" Exp ")";
EMod.     Exp ::= "mod"     "(" Exp ";" Exp ")";
EAdd.     Exp ::= "plus"    "(" Exp ";" Exp ")";
ESub.     Exp ::= "minus"   "(" Exp ";" Exp ")";
EGt.      Exp ::= "great"   "(" Exp ";" Exp ")";
EGte.     Exp ::= "greateq" "(" Exp ";" Exp ")";
ELt.      Exp ::= "less"    "(" Exp ";" Exp ")";
ELte.     Exp ::= "lesseq"  "(" Exp ";" Exp ")";
EEql.     Exp ::= "equal"   "(" Exp ";" Exp ")";
ENEql.    Exp ::= "noteq"   "(" Exp ";" Exp ")";
ERng.     Exp ::= "range"   "(" Exp ";" Exp ")";
ERngR.    Exp ::= "ranger"  "(" Exp ")"; -- ie, Exp "..."
ERngL.    Exp ::= "rangel"  "(" Exp ")"; -- ie, "..." Exp
EInt.     Exp ::= "integ" "[" Integer "]";
EDbl.     Exp ::= "doubl" "[" Double "]";
EStr.     Exp ::= "str"   "[" String  "]";

-- internal EVarT. Exp ::= "(" Var ":" Typ ")";

separator Exp ",";

-- Commands
CRet.   Cmd ::= "ret" "[" Typ "]" Exp;                                  -- return
CBnd.   Cmd ::= "bnd" Var "with" Exp ":" Typ "in" Cmd ":" Typ;          -- sequence

CNew.    Cmd ::= "new"    "[" Typ "]" "(" Var "." Cmd ")";               -- new qubit reference
CNewArr. Cmd ::= "arrnew" "[" Typ "]" "(" Nat ";" Var "." Cmd ")";       -- new qubit array
CGap.    Cmd ::= Uni "(" Exp ")";                                        -- unitary gate application
CDiag.   Cmd ::= "D" "(" Uni "," Uni ";" Exp "," Exp ")";                -- diagonal gate application
CMeas.   Cmd ::= "meas" "(" Exp ")";                                     -- measurement
